LINKED LIST CRUD OPERATIONS:

DELETE:
Deleting head node.
Deleting tail node.
Deleting of 
Nth node.
Deleting by value node.

class Main {

    static Node convertArrayToLinkedlist(int[] arr) {
        if (arr.length == 0) return null;

        Node head = new Node(arr[0]);
        Node current = head;

        for (int i = 1; i < arr.length; i++) {
            Node temp = new Node(arr[i]);
            current.next = temp;
            current = temp;
        }

        return head;
    }

    static Node deleteNthNode(Node head, int n) {
        if (head == null || n <= 0) return head;

        if (n == 1) {
            // Delete the head node
            return head.next;
        }

        Node current = head;
        for (int i = 1; i < n - 1 && current.next != null; i++) {
            current = current.next;
        }

        if (current.next != null) {
            current.next = current.next.next;
        }

        return head;
    }

    static void print(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + (temp.next != null ? "->" : "->null"));
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        Node head = convertArrayToLinkedlist(arr);
        head = deleteNthNode(head, 4); // Delete 4th node
        print(head);
    }
}

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }

    Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }
}
Output:

1->2->3->4->5->null


INSERT:
Inserting head node.
Inserting tail node.
Inserting of Nth node.
Inserting by value node.

class Main {
    static Node convertArrayToLinkedlist(int[] arr) {
        Node head = new Node(arr[0]);
        Node current = head;
        for (int i = 1; i < arr.length; i++) {
            Node temp = new Node(arr[i]);
            current.next = temp;
            current = temp;
        }
        return head;
    }

    static Node deleteHead(Node head) {
        if (head == null) return null;
        return head.next;
    }

    static Node deleteTail(Node head) {
        if (head == null || head.next == null) return null;

        Node temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }
        temp.next = null;
        return head;
    }

    static Node deleteNthNode(Node head, int n) {
        if (n == 1) return deleteHead(head);

        Node temp = head;
        Node prev = null;
        int count = 1;

        while (temp != null) {
            if (count == n) {
                if (prev != null) {
                    prev.next = temp.next;
                }
                temp.next = null;
                break;
            }
            prev = temp;
            temp = temp.next;
            count++;
        }
        return head;
    }

    static Node deleteByValue(Node head, int val) {
        if (head == null) return null;

        if (head.data == val) {
            return head.next;
        }

        Node temp = head;
        Node prev = null;

        while (temp != null) {
            if (temp.data == val) {
                if (prev != null) {
                    prev.next = temp.next;
                }
                temp.next = null;
                break;
            }
            prev = temp;
            temp = temp.next;
        }
        return head;
    }

    static Node insertAtHead(Node head, int val) {
        Node newNode = new Node(val);
        newNode.next = head;
        return newNode;
    }

    static Node insertAtTail(Node head, int val) {
        Node newNode = new Node(val);
        if (head == null) return newNode;

        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
        return head;
    }

    static Node insertAtNthNode(Node head, int n, int val) {
        Node newNode = new Node(val);
        if (n == 1) {
            newNode.next = head;
            return newNode;
        }

        Node temp = head;
        for (int i = 1; i < n - 1 && temp != null; i++) {
            temp = temp.next;
        }

        if (temp == null) {
            System.out.println("Position out of bounds.");
            return head;
        }

        newNode.next = temp.next;
        temp.next = newNode;
        return head;
    }

    static Node insertByValue(Node head, int ele, int val) {
        Node temp = head;
        while (temp != null) {
            if (temp.data == ele) {
                Node newNode = new Node(val);
                newNode.next = temp.next;
                temp.next = newNode;
                return head;
            }
            temp = temp.next;
        }

        System.out.println("Element " + ele + " not found.");
        return head;
    }

    static void print(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + (temp.next != null ? "->" : "->null"));
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        Node head = convertArrayToLinkedlist(arr);

        head = insertAtHead(head, 0);
        head = insertAtTail(head, 6);
        head = insertAtNthNode(head, 4, 99);
        head = insertByValue(head, 3, 88);
        head = deleteHead(head);
        head = deleteTail(head);
        head = deleteNthNode(head, 5);
        head = deleteByValue(head, 99);

        print(head);
    }
}
class Node {
    int data;
    Node next;

    Node(int data1) {
        this.data = data1;
        this.next = null;
    }

    Node(int data1, Node next1) {
        this.data = data1;
        this.next = next1;
    }
}

